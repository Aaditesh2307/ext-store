(function(){const r={manifest_version:3,name:"Codatta Clip",version:"1.1.9"};async function g(e){console.log("[BACKGROUND] Making fetch request to:",e.url);const{params:a,url:s}=e,i=await chrome.storage.local.get("auth");console.log("[BACKGROUND] Auth token exists:",!!i.auth),console.log("[BACKGROUND] Auth token details:",i.auth?"Present":"Missing"),a.headers=Object.assign(a.headers,i.auth,{"x-client":`${r.name}@${r.version}`}),console.log("[BACKGROUND] Request headers:",a.headers);const c=await fetch(s,a),o=c.headers.get("content-type");let n=null;return console.log("[BACKGROUND] Response status:",c.status),console.log("[BACKGROUND] Response content-type:",o),n=o==="application/json"?await c.json():o!=null&&o.includes("text/")?await c.text():await c.blob(),console.log("[BACKGROUND] Response data:",n),n}async function h(e,a){console.log("[BACKGROUND] API request received:",e.id||"unnamed","URL:",e.url);const{params:s,url:i,cache:c,auth:o=!0}=e,n=await chrome.storage.local.get("auth");if(console.log("[BACKGROUND] Chrome storage - auth retrieval for API request:",{hasAuth:!!n.auth,hasToken:!!(n.auth&&n.auth.token),hasAuthToken:!!(n.auth&&n.auth.auth_token),hasUid:!!(n.auth&&n.auth.uid),timestamp:new Date().toISOString()}),console.log("[BACKGROUND] Auth check - token exists:",!!n.auth),console.log("[BACKGROUND] Auth required for this request:",o),!n.auth&&o)return console.log("[BACKGROUND] No auth token found, returning error 1003"),void a({errorCode:1003,errorMessage:"Invalid auth token!",success:!1});const t=`${s.method}:${i}`,l=await chrome.storage.local.get(t);if(console.log("[BACKGROUND] Cache key:",t,"Cache exists:",!!l[t]),c&&l[t]){console.log("[BACKGROUND] Serving from cache"),a(l[t]);const u=await g(e);await chrome.storage.local.set({[t]:u})}else{console.log("[BACKGROUND] Making fresh API call");const u=await g(e);a(u),c&&chrome.storage.local.set({[t]:u})}}chrome.runtime.onMessageExternal.addListener((e,a,s)=>(console.log("[BACKGROUND] External message received:",e.id,"from:",a.origin,"sender:",a),console.log("[BACKGROUND] Full message object:",e),console.log("[BACKGROUND] Callback function exists:",typeof s=="function"),e.id==="hello-extension"?(console.log("[BACKGROUND] Hello extension message - responding with success"),s("success"),!0):e.id==="send-request"?(console.log("[BACKGROUND] Send request message"),h(e,s),!0):e.id==="web-login"?(console.log("[BACKGROUND] Web login message received"),async function(i,c){const{params:o}=i;console.log("[BACKGROUND] Storing auth token:",{token:o.token?"Present":"Missing",uid:o.uid?"Present":"Missing",auth:o.auth?"Present":"Missing"}),console.log("[BACKGROUND] Chrome storage - before auth save (web-login):",{timestamp:new Date().toISOString()}),await chrome.storage.local.set({auth:{token:o.token,uid:o.uid,auth_token:o.auth,showInviterCode:!!(o!=null&&o.showInviterCode)}}),console.log("[BACKGROUND] Chrome storage - auth saved successfully (web-login):",{hasToken:!!o.token,hasUid:!!o.uid,hasAuthToken:!!o.auth,showInviterCode:!!(o!=null&&o.showInviterCode),timestamp:new Date().toISOString()}),console.log("[BACKGROUND] Auth token stored successfully"),chrome.runtime.sendMessage({id:"inject-reload"}),c("success")}(e,s),!0):(console.log("[BACKGROUND] Unknown external message type:",e.id),!1))),chrome.runtime.onMessage.addListener(function(e,a,s){var i;const{id:c}=e,o=((e==null?void 0:e.tabId)||((i=a.tab)==null?void 0:i.id))??0;switch(console.log("[BACKGROUND] Internal message received:",c,"from tab:",o),c){case"send-request":console.log("[BACKGROUND] Handling send-request"),h(e,s);break;case"screen-capture":console.log("[BACKGROUND] Handling screen-capture"),async function(n,t,l){try{const[u]=await chrome.windows.getAll({populate:!0}),d=u.tabs.find(m=>m.active);if(!d)return console.log("[BACKGROUND] No active tab found for screen capture"),void l({error:"No active tab found."});console.log("[BACKGROUND] Capturing screen from tab:",d.id),l(await chrome.tabs.captureVisibleTab(d.windowId))}catch(u){console.error("[BACKGROUND] Screen capture error:",u)}}(0,0,s);break;case"inject-logout":console.log("[BACKGROUND] Handling logout - removing auth token"),async function(n){console.log("[BACKGROUND] Chrome storage - before auth removal:",{timestamp:new Date().toISOString()});const t=await chrome.storage.local.get("auth");console.log("[BACKGROUND] Chrome storage - current auth before removal:",{hasAuth:!!t.auth,hasToken:!!(t.auth&&t.auth.token),hasAuthToken:!!(t.auth&&t.auth.auth_token),hasUid:!!(t.auth&&t.auth.uid),timestamp:new Date().toISOString()}),await chrome.storage.local.remove("auth"),console.log("[BACKGROUND] Chrome storage - auth removed successfully:",{timestamp:new Date().toISOString()});const l=await chrome.storage.local.get("auth");console.log("[BACKGROUND] Chrome storage - verification after removal:",{hasAuth:!!l.auth,timestamp:new Date().toISOString()}),console.log("[BACKGROUND] Auth token removed successfully"),n("success")}(s);break;case"show-signin":console.log("[BACKGROUND] Handling show-signin - injecting signin script"),async function(n,t,l){await chrome.scripting.executeScript({target:{tabId:l},world:"MAIN",files:["signin.js"]}),console.log("[BACKGROUND] Signin script injected successfully"),t("success")}(0,s,o);break;case"update-completed-link-list":console.log("[BACKGROUND] Handling update-completed-link-list"),function(n,t,l){chrome.runtime.sendMessage({id:"update-completed-result",data:l}),t("success")}(0,s,e.data);break;case"click-browser-icon":console.log("[BACKGROUND] Handling click-browser-icon");break;case"continue-crawl":console.log("[BACKGROUND] Handling continue-crawl"),chrome.runtime.sendMessage({id:"continue-crawl-res"});break;default:console.log("[BACKGROUND] Unknown message type:",c),s({data:"miao?"})}return!0}),chrome.action.onClicked.addListener(async e=>{console.log("[BACKGROUND] Extension icon clicked - popup mode, no action needed")}),chrome.contextMenus.create({contexts:["all"],id:"create-submission",title:"create submission"}),chrome.contextMenus.onClicked.addListener(async(e,a)=>{console.log("[BACKGROUND] Context menu clicked:",e.menuItemId)}),chrome.webRequest.onCompleted.addListener(e=>{console.log("[BACKGROUND] Web request completed:",e.url),console.log("[BACKGROUND] Full request event object:",JSON.stringify(e,null,2)),chrome.runtime.sendMessage({id:"check-request",data:e})},{urls:["https://www.instagram.com/*","https://www.facebook.com/*"]}),console.log("[BACKGROUND] Background script loaded and initialized"),console.log("[BACKGROUND] Extension ID:",chrome.runtime.id),console.log("[BACKGROUND] Manifest version:",r.manifest_version),chrome.storage.local.get("auth").then(e=>{console.log("[BACKGROUND] Initial auth state check:",{hasAuth:!!e.auth,hasToken:!!(e.auth&&e.auth.auth_token),timestamp:new Date().toISOString()})}),console.log("[BACKGROUND] External message listener registered"),console.log("[BACKGROUND] Externally connectable matches: <all_urls>")})();chrome.runtime.onMessage.addListener((r,g,h)=>(console.log("[BACKGROUND] Received message:",r),r.url&&r.tabId&&(console.log("[BACKGROUND] URL:",r.url),console.log("[BACKGROUND] Tab ID:",r.tabId),chrome.tabs.update(r.tabId,{url:r.url}),h({success:!0})),!0));
